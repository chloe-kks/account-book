{"ast":null,"code":"import axios from 'axios';\nimport crypto from 'crypto';\nexport function onLogin({\n  id,\n  password\n}) {\n  function getFormatDate(date) {\n    var year = date.getFullYear(); //yyyy\n\n    var month = 1 + date.getMonth(); //M\n\n    month = month >= 10 ? month : '0' + month; //month 두자리로 저장\n\n    var day = date.getDate(); //d\n\n    day = day >= 10 ? day : '0' + day; //day 두자리로 저장\n\n    var hour = date.getHours();\n    hour = hour >= 10 ? hour : '0' + hour;\n    var minute = date.getMinutes();\n    minute = minute >= 10 ? minute : '0' + minute;\n    var seconds = date.getSeconds();\n    seconds = seconds >= 10 ? seconds : '0' + seconds;\n    return year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + seconds; //'-' 추가하여 yyyy-mm-dd 형태 생성 가능\n  }\n\n  return new Promise((resolve, reject) => {\n    const pw = crypto.createHash('sha512').update(password).digest('base64');\n    const data = {\n      \"header\": {\n        \"DATA_TYPE\": \"3\"\n      },\n      \"dto\": {\n        \"USER_ID\": id,\n        \"USER_PW\": pw\n      }\n    };\n    let date = new Date();\n    date = getFormatDate(date);\n    axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/ReadUserAccount?action=SO', data).then(response => {\n      const user = response.data.dto;\n      const main_login = JSON.stringify(user.LAST_LOGIN).slice(1, 20);\n      const new_data = {\n        \"header\": {\n          \"DATA_TYPE\": \"3\"\n        },\n        \"dto\": {\n          \"USER_ID\": user.USER_ID,\n          \"COMP_NM\": user.COMP_NM,\n          \"COMP_ADDR\": user.COMP_ADDR,\n          \"COMP_CONTACT\": user.COMP_CONTACT,\n          \"COMP_EMAIL\": user.COMP_EMAIL,\n          \"COMP_NUM\": user.COMP_NUM,\n          \"COMP_CEO_NM\": user.COMP_CEO_NM,\n          \"COMP_CEO_BIRTH\": user.COMP_CEO_BIRTH.slice(0, 10),\n          \"LAST_LOGIN\": date\n        }\n      }; // console.log(new_date)\n\n      if (user != null) {\n        const auth = user.USER_PW === pw;\n\n        if (auth) {\n          window.sessionStorage.setItem('id', user.USER_ID);\n          window.sessionStorage.setItem('lastlogin', main_login); // console.log(new_data)\n\n          axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/UpdateUserAccount?action=SO', new_data).then(response => {}).catch(e => {\n            console.log(e);\n          });\n          resolve(user);\n        } else {\n          reject('not auth');\n        }\n      } else {\n        reject('not exist');\n      }\n    }).catch(e => {\n      console.log(e);\n      reject(e);\n    });\n  });\n}","map":{"version":3,"sources":["/home/moss/OJT/src/auth.js"],"names":["axios","crypto","onLogin","id","password","getFormatDate","date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","seconds","getSeconds","Promise","resolve","reject","pw","createHash","update","digest","data","Date","post","then","response","user","dto","main_login","JSON","stringify","LAST_LOGIN","slice","new_data","USER_ID","COMP_NM","COMP_ADDR","COMP_CONTACT","COMP_EMAIL","COMP_NUM","COMP_CEO_NM","COMP_CEO_BIRTH","auth","USER_PW","window","sessionStorage","setItem","catch","e","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport crypto from 'crypto';\n\nexport function onLogin ({ id, password }) {\n    function getFormatDate(date){\n        var year = date.getFullYear();              //yyyy\n        var month = (1 + date.getMonth());          //M\n        month = month >= 10 ? month : '0' + month;  //month 두자리로 저장\n        var day = date.getDate();                   //d\n        day = day >= 10 ? day : '0' + day;          //day 두자리로 저장\n        var hour = date.getHours();\n        hour = hour >= 10 ? hour : '0' + hour;\n        var minute = date.getMinutes();\n        minute = minute >= 10 ? minute : '0' + minute;\n        var seconds = date.getSeconds();\n        seconds = seconds >= 10 ? seconds : '0' + seconds;\n        return  year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + seconds;       //'-' 추가하여 yyyy-mm-dd 형태 생성 가능\n      }\n\n    return new Promise ((resolve, reject) => {\n        const pw = crypto.createHash('sha512').update(password).digest('base64');\n        const data = {\n            \"header\": {\n                \"DATA_TYPE\": \"3\"\n            },\n            \"dto\": {\n                \"USER_ID\": id,\n                \"USER_PW\": pw\n            }\n        }\n        let date = new Date();\n        date = getFormatDate(date);\n        axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/ReadUserAccount?action=SO', data)\n        .then(response => {\n            const user = response.data.dto;\n            const main_login = JSON.stringify(user.LAST_LOGIN).slice(1,20);\n            const new_data = {\n                \"header\": {\n                    \"DATA_TYPE\": \"3\"\n                },\n                \"dto\": {\n                    \"USER_ID\": user.USER_ID,\n                    \"COMP_NM\": user.COMP_NM,\n                    \"COMP_ADDR\": user.COMP_ADDR,\n                    \"COMP_CONTACT\": user.COMP_CONTACT,\n                    \"COMP_EMAIL\": user.COMP_EMAIL,\n                    \"COMP_NUM\": user.COMP_NUM,\n                    \"COMP_CEO_NM\": user.COMP_CEO_NM,\n                    \"COMP_CEO_BIRTH\": user.COMP_CEO_BIRTH.slice(0,10),\n                    \"LAST_LOGIN\": date\n                }\n            }\n            // console.log(new_date)\n            if (user != null){\n                const auth = (user.USER_PW === pw);\n                if(auth){\n                    window.sessionStorage.setItem('id', user.USER_ID);\n                    window.sessionStorage.setItem('lastlogin', main_login);\n                    // console.log(new_data)\n                    axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/UpdateUserAccount?action=SO', new_data)\n                    .then(response => {\n                    }).catch((e) => {\n                        console.log(e);\n                    });\n                    resolve(user);\n                }else{\n                    reject('not auth');\n                }\n            }else{\n                reject('not exist');\n            }\n        }).catch((e) => {\n            console.log(e);\n            reject(e)\n        });\n    })\n}"]},"metadata":{},"sourceType":"module"}