[{"/home/moss/OJT/src/index.js":"1","/home/moss/OJT/src/App.js":"2","/home/moss/OJT/src/reportWebVitals.js":"3","/home/moss/OJT/src/auth.js":"4","/home/moss/OJT/src/AuthRoute.js":"5","/home/moss/OJT/src/Pages/Login.js":"6","/home/moss/OJT/src/Pages/Main.js":"7","/home/moss/OJT/src/Pages/Home.js":"8","/home/moss/OJT/src/Pages/Sign.js":"9","/home/moss/OJT/src/Pages/UserInfoChange.js":"10","/home/moss/OJT/src/Pages/Deny.js":"11","/home/moss/OJT/src/Pages/UserInfoPw.js":"12","/home/moss/OJT/src/Pages/Payment.js":"13","/home/moss/OJT/src/Pages/Card.js":"14"},{"size":575,"mtime":1615098766501,"results":"15","hashOfConfig":"16"},{"size":4866,"mtime":1615177525033,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1615098766501,"results":"18","hashOfConfig":"16"},{"size":3037,"mtime":1615168629774,"results":"19","hashOfConfig":"16"},{"size":536,"mtime":1615098766497,"results":"20","hashOfConfig":"16"},{"size":2999,"mtime":1615178340081,"results":"21","hashOfConfig":"16"},{"size":2916,"mtime":1615178370941,"results":"22","hashOfConfig":"16"},{"size":1055,"mtime":1615178356753,"results":"23","hashOfConfig":"16"},{"size":9664,"mtime":1615178398702,"results":"24","hashOfConfig":"16"},{"size":5886,"mtime":1615177525033,"results":"25","hashOfConfig":"16"},{"size":288,"mtime":1615098766497,"results":"26","hashOfConfig":"16"},{"size":5927,"mtime":1615178421474,"results":"27","hashOfConfig":"16"},{"size":22166,"mtime":1615178386569,"results":"28","hashOfConfig":"16"},{"size":28569,"mtime":1615178317240,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tz5256",{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},"/home/moss/OJT/src/index.js",[],"/home/moss/OJT/src/App.js",["67","68","69","70","71"],"import './App.css';\nimport React, { useState, createRef } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Button } from 'antd';\n\nimport { onLogin } from './auth';\nimport AuthRoute from './AuthRoute';\nimport Home from './Pages/Home';\nimport Login from './Pages/Login';\nimport Main from './Pages/Main';\nimport Sign from './Pages/Sign';\nimport Card from './Pages/Card';\nimport Payment from './Pages/Payment';\nimport UserInfoPw from './Pages/UserInfoPw';\nimport UserInfoChange from './Pages/UserInfoChange';\nimport Deny from './Pages/Deny';\nimport 'antd/dist/antd.css';\nimport { Layout, message } from 'antd';\nconst { Footer } = Layout;\n\n// function onLogin ({ id, password }) {\n//   return new Promise ((resolve, reject) => {\n//       // const user = users.find(user => user.id === id && user.password === password);\n//       // console.log(user)\n//       // return user;\n//       const data = {\n//           \"header\": {\n//               \"DATA_TYPE\": \"3\"\n//           },\n//           \"dto\": {\n//               \"USER_ID\": id,\n//               \"USER_PW\": password\n//           }\n//       }\n//       var result;\n//       axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/ReadUserAccount?action=SO', data)\n//       .then(response => {\n//           const user = response.data.dto;\n//           const auth = (user.USER_PW === password);\n//           console.log('Axios return: '+JSON.stringify(user))\n//           resolve(user);\n//       }).catch((e) => {\n//           console.log('axios error');\n//           reject(e)\n//       });\n//     })\n// }\n\nfunction App() {\n  const [user, setUser] = useState();\n  const authenticated = window.sessionStorage.getItem('id') != null;\n  const id = window.sessionStorage.getItem('id');\n  const lastlogin = window.sessionStorage.getItem('lastlogin');\n  // const login = ({ id, password }) => {\n  //   const { data: userinfo, error, isLoading } = useAsync({\n  //     promiseFn: onLogin\n  //   })\n  //   setUser(userinfo);\n  // }\n  const [loginInProgress, setLoginInProgress] = useState(false);\n  const login = ({ id, password }) => {\n    setLoginInProgress(true);\n    onLogin({ id, password })\n          .then(response => {setUser(response)\n                             setLoginInProgress(false)\n                             message.success('\\'' + id + '\\'로 로그인 되었습니다.')})\n    .catch((e) => { \n      console.log(e)\n      message.error('로그인에 실패하였습니다.')\n      setLoginInProgress(false)\n    });\n    // setUser(onLogin({ id, password }));\n  }\n  const logout = () => setUser(null);\n  // console.log('App has User: '+JSON.stringify(user));\n  console.log(authenticated);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path='/' component={ Home } />\n          <Route\n            path='/login'\n            render={props => (\n              <Login authenticated={authenticated} login={login} loginInProgress={loginInProgress} {...props} />\n            )}\n          />\n          <Route path='/sign' component={ Sign } />\n          <AuthRoute\n          authenticated={authenticated}\n          path='/main'\n          render={props =>  (\n            <Main userid={id} lastlogin={lastlogin} logout={logout} />\n          )}\n          />\n          <AuthRoute authenticated={authenticated}\n          path='/card'\n          render={props =>  (\n            <Card userid={id} />\n          )}\n          />\n          <AuthRoute authenticated={authenticated}\n          path='/payment'\n          render={props =>  (\n            <Payment userid={id} />\n          )}\n          />\n          <AuthRoute authenticated={authenticated}\n          path='/userinfo/pw'\n          render={props =>  (\n            <UserInfoPw userid={id} />\n          )}\n          />\n          {/* <AuthRoute authenticated={authenticated}\n          path='/userinfo/change'\n          render={props =>  (\n            <UserInfoChange userid={id} />\n          )}\n          /> */}\n          <Route path='/' component={ Deny } />\n        </Switch>\n      </Router>\n      <Footer style={{ textAlign: 'center',  borderTop: '1px solid #e4e8eb', backgroundColor: '#fafbfc'}}>TmaxBI ©2021 Created by AB3-5</Footer>\n    </div>\n  );\n}\n\nexport default App;\n\n{/* <AuthRoute authenticated={authenticated}\npath='/card'\nrender={props =>  (\n  <Card userid={user.USER_ID} />\n)}\n/>\n<AuthRoute authenticated={authenticated}\npath='/payment'\nrender={props =>  (\n  <Payment userid={user.USER_ID} />\n )}\n/>\n<AuthRoute authenticated={authenticated}\npath='/userinfo/pw'\nrender={props =>  (\n  <UserInfoPw userid={user.USER_ID} />\n)}\n/>\n<AuthRoute authenticated={authenticated}\npath='/userinfo/change'\nrender={props =>  (\n  <UserInfoChange userid={user.USER_ID} />\n)}\n/>\n<AuthRoute authenticated={authenticated}\npath='/file' \nrender={props =>  (\n  <File userid={user.USER_ID} />\n)}\n/>   */}","/home/moss/OJT/src/reportWebVitals.js",[],"/home/moss/OJT/src/auth.js",[],"/home/moss/OJT/src/AuthRoute.js",[],"/home/moss/OJT/src/Pages/Login.js",["72","73"],"import React, { useState } from 'react';\nimport tmax from '../tmax.gif';\nimport 'antd/dist/antd.css';\nimport '../App.css';\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { Link, Redirect } from 'react-router-dom';\n\n\nfunction NormalLoginForm ({authenticated, login, location, loginInProgress}) {\n  // const [id, setId] = useState('');\n  // const [password, setPassword] = useState('');\n\n  // const handleClick = () => {\n  //   try{\n  //     login({ id, password })\n  //   } catch (e) {\n  //     alert('로그인에 실패하였습니다.')\n  //     setId('')\n  //     setPassword('')\n  //   }\n  // }\n\n  const onFinish = (values) => {\n    // console.log('Received values of form: ', values);\n    let id = values.id;\n    let password = values.password;\n    try{\n      login({ id, password })\n    } catch (e) {\n      alert('로그인에 실패하였습니다.')\n\n    }\n  };\n\n  const { from } = location.state || { from: { pathname: \"/main\" } }\n  \n  if (authenticated) return <Redirect to={from} />\n\n  return (\n    <Form style={{margin: 'auto', maxWidth: '20%'}}\n      name=\"normal_login\"\n      className=\"login-form\"\n      initialValues={{\n        remember: true,\n      }}\n      onFinish={onFinish}\n    >\n      <Form.Item\n        name=\"id\"\n        rules={[\n          {\n            required: true,\n            message: '아이디를 입력하세요.',\n          },\n        ]}\n      >\n        <Input \n          type='text'\n          prefix={<UserOutlined className=\"site-form-item-icon\" />}\n          placeholder=\"ID\" \n          disabled={loginInProgress}\n        />\n      </Form.Item>\n      <Form.Item\n        name=\"password\"\n        rules={[\n          {\n            required: true,\n            message: '비밀번호를 입력하세요.',\n          },\n        ]}\n      >\n        <Input\n          type=\"password\"\n          placeholder=\"비밀번호\"\n          disabled={loginInProgress}\n        />\n      </Form.Item>\n      <Form.Item>\n        <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\n          <Checkbox disabled={loginInProgress}>ID 기억하기</Checkbox>\n        </Form.Item>\n\n      </Form.Item>\n\n      <Form.Item>\n        <Button style={{ margin: '10px' }} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" loading={loginInProgress}>\n          로그인\n        </Button>\n        <br/>\n        또는 <Link to='/sign'>새로 가입하기</Link>\n      </Form.Item>\n    </Form>\n  );\n};\n\n  function Login({authenticated, login, location, loginInProgress}) {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a href=\"http://aria.sparcs.org:32785\" style={{ display: 'inline-block' }}>\n            <img src={tmax} className=\"App-logo\" alt=\"logo\" />\n          </a>\n          <NormalLoginForm authenticated={authenticated} login={login} location={location} loginInProgress={loginInProgress}/>\n        </header>\n      </div>\n    );\n}\n\nexport default Login;\n","/home/moss/OJT/src/Pages/Main.js",["74"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\nimport 'antd/dist/antd.css';\nimport { Layout, Menu, Breadcrumb, Button } from 'antd';\nimport {\n  DesktopOutlined,\n  PieChartOutlined,\n  FileOutlined,\n  TeamOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\n\nconst { Header, Content, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n  };\n\n  onCollapse = collapsed => {\n    this.setState({ collapsed });\n  };\n\n  handleClick(){\n    window.location.href = \"http://aria.sparcs.org:32785\";\n    window.sessionStorage.clear();\n    window.location.reload();\n  }\n\n  render() {\n    const { collapsed } = this.state;\n    const temp = window.sessionStorage.getItem('id');\n    var login = '';\n    if(this.props.lastlogin != null) login = this.props.lastlogin.slice(0,19);\n    // console.log(this.props.lastlogin)\n    // if(this.props.lastlogin.length != 0) login = this.props.lastlogin.slice(0, 19)\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\n          <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n            <Menu.Item key=\"1\" icon={<TeamOutlined />}>\n              <Link to=\"/main\">홈</Link>\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<PieChartOutlined />}>\n              <Link to=\"/card\">카드 관리</Link>\n            </Menu.Item>\n            <Menu.Item key=\"3\" icon={<DesktopOutlined />}>\n              <Link to=\"/payment\">결제 내역</Link>\n            </Menu.Item>\n            <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"회원 정보\">\n              <Menu.Item key=\"4\"><Link to=\"/userinfo/pw\">비밀번호 변경</Link></Menu.Item>\n              {/* <Menu.Item key=\"5\"><Link to=\"/userinfo/change\">회원정보 수정</Link></Menu.Item> */}\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n            <Button onClick={this.handleClick} style={{ float: 'right', margin: 15}}>\n              Logout\n            </Button>\n          </Header>\n          <Content style={{ margin: '0 16px' }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n              <Breadcrumb.Item>Admin</Breadcrumb.Item>\n              <Breadcrumb.Item>User</Breadcrumb.Item>\n            </Breadcrumb>\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n              마지막 접속: {login} <br/>\n              {temp}님 어서오세요.\n            </div>\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nfunction Main({ userid, lastlogin }) {\n  const userID = userid;\n  const lastLogin = lastlogin;\n  return (\n    <SiderDemo userid={userID} lastlogin={lastLogin} />\n  );\n}\n\n\n\nexport default Main;\n\n","/home/moss/OJT/src/Pages/Home.js",["75","76","77"],"import React, { useState } from 'react';\nimport tmax from '../tmax.gif';\nimport 'antd/dist/antd.css';\nimport '../App.css';\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { Link } from 'react-router-dom';\n\nconst HomeForm = () => {\n\n  return (\n    <Form style={{margin: 'auto', maxWidth: '10%', paddingBottom: '10px', paddingTop: 30}}\n      name=\"normal_home\"\n      className=\"login-form\"\n    >\n      <Form.Item name=\"username\">\n        <Button style={{ width: '100%'}}><Link to=\"/login\">로그인</Link></Button>\n      </Form.Item>\n\n      <Form.Item name=\"password\">\n        <Button style={{ width: '100%'}}><Link to=\"/sign\">회원가입</Link></Button>\n      </Form.Item>\n\n    </Form>\n  );\n};\n\nfunction Home() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a href=\"http://aria.sparcs.org:32785\" style={{ display: 'inline-block' }}>\n            <img src={tmax} className=\"App-logo\" alt=\"logo\" />\n          </a>\n          <HomeForm/>\n        </header>\n      </div>\n    );\n}\n\nexport default Home;\n","/home/moss/OJT/src/Pages/Sign.js",["78"],"import '../App.css';\nimport axios from 'axios';\nimport tmax from '../tmax.gif';\nimport React, { useState } from 'react';\nimport DaumPostcode from \"react-daum-postcode\";\nimport 'antd/dist/antd.css';\nimport crypto from 'crypto';\nimport moment from 'moment';\n\nimport {\n  Form,\n  Input,\n  Tooltip,\n  Select,\n  Checkbox,\n  Button,\n  Modal,\n  Space,\n  message,\n  DatePicker\n} from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nconst { Option } = Select;\nconst { Search } = Input;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 8,\n    },\n  },\n  wrapperCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 16,\n    },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nconst Postcode = (props) => {\n  // const [fullAddress, setFullAddress] = useState('');\n\n  const handleComplete = (data) => {\n    let fullAddress = data.address;\n    let extraAddress = ''; \n    \n    if (data.addressType === 'R') {\n      if (data.bname !== '') {\n        extraAddress += data.bname;\n      }\n      if (data.buildingName !== '') {\n        extraAddress += (extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName);\n      }\n      fullAddress += (extraAddress !== '' ? ` (${extraAddress})` : '');\n    }\n\n    console.log(fullAddress);  // e.g. '서울 성동구 왕십리로2길 20 (성수동1가)'\n    props.changeAddress(fullAddress);\n  }\n\n  return (\n    <DaumPostcode\n      onComplete={handleComplete}\n    />\n  );\n}\n\nconst ModalContainer = (props) => {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [address, setAddress] = useState('');\n  const [reqInProgress, setReqInProgress] = useState({...props.reqInProgress});\n  React.useEffect(() => {\n      setReqInProgress(props.reqInProgress);\n  }, [props.reqInProgress])\n    \n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const changeAddress = (e) => {\n    setAddress(e);\n    props.changeAddr(e);\n  }\n\n  return (\n    <>\n      <Space direction=\"vertical\" onClick={showModal} style={{ width: '100%' }}>\n        <Search placeholder={address} disabled={props.reqInProgress}/>\n      </Space>\n      <Modal visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\n        <Postcode changeAddress={e => changeAddress(e)} />\n      </Modal>\n    </>\n  );\n};\n\nfunction getFormatDate(date){\n  var year = date.getFullYear();              //yyyy\n  var month = (1 + date.getMonth());          //M\n  month = month >= 10 ? month : '0' + month;  //month 두자리로 저장\n  var day = date.getDate();                   //d\n  day = day >= 10 ? day : '0' + day;          //day 두자리로 저장\n  var hour = date.getHours();\n  hour = hour >= 10 ? hour : '0' + hour;\n  var minute = date.getMinutes();\n  minute = minute >= 10 ? minute : '0' + minute;\n  var seconds = date.getSeconds();\n  seconds = seconds >= 10 ? seconds : '0' + seconds;\n  return  year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + seconds;       //'-' 추가하여 yyyy-mm-dd 형태 생성 가능\n}\n\nconst RegistrationForm = () => {\n  const [form] = Form.useForm();\n  const [addr, setAddr] = useState('');\n  const [reqInProgress, setReqInProgress] = useState(false);\n\n  const onFinish = (values) => {\n    setReqInProgress(true);\n    // console.log('Received values of form: ', values);\n    // console.log({addr});\n    let big_addr = JSON.stringify({addr}).slice(9, -2);\n    let date = new Date();\n    date = getFormatDate(date);\n    const pw = crypto.createHash('sha512').update(values.password).digest('base64');\n    const data = {\n      \"header\": {\n          \"DATA_TYPE\": \"3\"\n      },\n      \"dto\": {\n        \"USER_ID\": values.id,\n        \"USER_PW\": pw,\n        \"COMP_NM\": values.comp_nm,\n        \"COMP_ADDR\": big_addr+' '+values.detail_address,\n        \"COMP_CONTACT\": values.ceo_phone,\n        \"COMP_EMAIL\": values.email,\n        \"COMP_NUM\": values.comp_reg,\n        \"COMP_CEO_NM\": values.ceo_nm,\n        \"COMP_CEO_BIRTH\": moment(values.birth).format('YYYY-MM-DD'),\n        \"LAST_LOGIN\": date\n      }\n    }\n    console.log(data);\n    axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/InsertUserAccount?action=SO', data).then(response => {\n      message.success('회원가입이 완료되었습니다.')\n      setReqInProgress(false)\n      setTimeout(() => {\n        window.location.href = '../';\n      }, 1500);\n      \n    }).catch(error => {\n      message.error('회원가입에 실패하였습니다. 잠시 후 다시 시도해주세요.')\n      setReqInProgress(false)\n    });\n  };\n\n  const changeAddr = (e) => {\n    setAddr(e);\n  }\n\n  const prefixSelector = (\n    <Form.Item name=\"prefix\" noStyle>\n      <Select disabled={reqInProgress}\n        style={{\n          width: 70,\n        }}\n      >\n        <Option value=\"82\">+82</Option>\n        <Option value=\"1\">+1</Option>\n      </Select>\n    </Form.Item>\n  );\n\n  return (\n    <Form style={{ margin: 'auto', maxWidth: '35%', paddingRight: '60px' }}\n      {...formItemLayout}\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      scrollToFirstError\n    >\n      <Form.Item\n        name=\"id\"\n        label=\"ID\"\n        rules={[\n          {\n            required: true,\n            message: '아이디를 입력해주세요!',\n          },\n        ]}\n      >\n        <Input disabled={reqInProgress}/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        label=\"비밀번호\"\n        rules={[\n          {\n            required: true,\n            message: '비밀번호를 입력해주세요!',\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password disabled={reqInProgress}/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        label=\"비밀번호 확인\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: '비밀번호를 다시 입력해주세요!',\n          },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject('비밀번호가 일치하지 않습니다!');\n            },\n          }),\n        ]}\n      >\n        <Input.Password disabled={reqInProgress}/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"comp_nm\"\n        label=\"법인명\"\n        rules={[\n          {\n            required: true,\n            message: '법인 이름을 입력하세요!',\n            whitespace: true,\n          },\n        ]}\n      >\n        <Input disabled={reqInProgress}/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"comp_reg\"\n        label={\n          <span>\n            사업자등록번호&nbsp;\n            <Tooltip title=\"하이픈(-)을 제외한 숫자만 입력하세요.\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        }\n        rules={[\n          {\n            required: true,\n            message: '사업자등록번호를 입력하세요!',\n          },\n        ]}\n      >\n        <Input disabled={reqInProgress}/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"address\"\n        label=\"주소\"\n      >\n        <ModalContainer changeAddr={e => changeAddr(e)} reqInProgress={reqInProgress}/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"detail_address\"\n        label=\"상세 주소\"\n      >\n        <Input disabled={reqInProgress}/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"ceo_nm\"\n        label=\"대표자 이름\"\n      >\n        <Input disabled={reqInProgress}/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"ceo_phone\"\n        label=\"대표 번호\"\n      >\n        <Input\n          addonBefore={prefixSelector}\n          style={{\n            width: '100%',\n          }}\n          disabled={reqInProgress}\n        />\n      </Form.Item>\n\n      <Form.Item\n        name=\"email\"\n        label=\"대표 이메일\"\n        rules={[\n          {\n            type: 'email',\n            message: '유효한 이메일이 아닙니다.',\n          },\n        ]}\n      >\n        <Input disabled={reqInProgress}/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"birth\"\n        label=\"대표 생년월일\"\n      >\n        <DatePicker disabled={reqInProgress}\n          placeholder='YYYY-MM-DD'\n          style={{\n            width: '100%',\n          }}/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"agreement\"\n        valuePropName=\"checked\"\n        rules={[\n          {\n            validator: (_, value) =>\n              value ? Promise.resolve() : Promise.reject('Should accept agreement'),\n          },\n        ]}\n        {...tailFormItemLayout}\n      >\n        <Checkbox disabled={reqInProgress}>\n          나는 <a href=\"https://kr.tmaxsoft.com/bbs.do?cms_cd=ETC_90\">개인정보 처리방침</a>를 읽었으며, 이에 동의합니다.\n        </Checkbox>\n      </Form.Item>\n      <Form.Item {...tailFormItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\" loading={reqInProgress}>\n          회원가입\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nfunction Sign() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a href=\"http://aria.sparcs.org:32785\" style={{ display: 'inline-block' }}>\n            <img src={tmax} className=\"App-logo\" alt=\"logo\" />\n          </a>\n          <RegistrationForm/>\n        </header>\n      </div>\n    );\n}\n\nexport default Sign;\n\n","/home/moss/OJT/src/Pages/UserInfoChange.js",["79"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DaumPostcode from \"react-daum-postcode\";\nimport '../App.css';\nimport 'antd/dist/antd.css';\nimport {\n  Layout,\n  Menu,\n  Form,\n  Input,\n  Select,\n  Button,\n  Modal,\n  Space,\n} from 'antd';\nimport {\n  DesktopOutlined,\n  PieChartOutlined,\n  FileOutlined,\n  TeamOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\n\nconst { Header, Content, Sider } = Layout;\nconst { SubMenu } = Menu;\nconst { Option } = Select;\nconst { Search } = Input;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 8,\n    },\n  },\n  wrapperCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 16,\n    },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nconst Postcode = () => {\n  const handleComplete = (data) => {\n    let fullAddress = data.address;\n    let extraAddress = ''; \n    \n    if (data.addressType === 'R') {\n      if (data.bname !== '') {\n        extraAddress += data.bname;\n      }\n      if (data.buildingName !== '') {\n        extraAddress += (extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName);\n      }\n      fullAddress += (extraAddress !== '' ? ` (${extraAddress})` : '');\n    }\n\n    console.log(fullAddress);  // e.g. '서울 성동구 왕십리로2길 20 (성수동1가)'\n  }\n\n  return (\n    <DaumPostcode\n      onComplete={handleComplete}\n    />\n  );\n}\n\nconst ModalContainer = () => {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  return (\n    <>\n      <Space direction=\"vertical\" onClick={showModal} style={{ width: '100%' }}>\n        <Search placeholder=\"우편번호 검색\" />\n      </Space>\n      <Modal visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\n        <Postcode/>\n      </Modal>\n    </>\n  );\n};\n\nconst RegistrationForm = () => {\n  const [form] = Form.useForm();\n\n  const onFinish = (values) => {\n    console.log('Received values of form: ', values);\n  };\n\n  const prefixSelector = (\n    <Form.Item name=\"prefix\" noStyle>\n      <Select\n        style={{\n          width: 70,\n        }}\n      >\n        <Option value=\"82\">+82</Option>\n        <Option value=\"1\">+1</Option>\n      </Select>\n    </Form.Item>\n  );\n\n  return (\n    <Form style={{margin: 'auto', maxWidth: '40%', paddingRight: '10%'}}\n      {...formItemLayout}\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      scrollToFirstError\n    >\n      <Form.Item\n        name=\"comp_nm\"\n        label=\"법인명\"\n        rules={[\n          {\n            whitespace: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"address\"\n        label=\"주소\"\n        rules={[\n          {\n            type: 'array',\n          },\n        ]}\n      >\n        <ModalContainer/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"ceo_nm\"\n        label=\"대표자 이름\"\n      >\n        <Input/>\n      </Form.Item>\n\n      <Form.Item\n        name=\"phone\"\n        label=\"대표 번호\"\n      >\n        <Input\n          addonBefore={prefixSelector}\n          style={{\n            width: '100%',\n          }}\n        />\n      </Form.Item>\n\n      <Form.Item\n        name=\"email\"\n        label=\"대표 이메일\"\n        rules={[\n          {\n            type: 'email',\n            message: '유효한 이메일이 아닙니다!',\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"birth\"\n        label=\"생년월일\"\n      >\n        <Input/>\n      </Form.Item>\n\n      <Form.Item {...tailFormItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          수정\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n  };\n\n  onCollapse = collapsed => {\n    console.log(collapsed);\n    this.setState({ collapsed });\n  };\n\n  handleClick(){\n    window.location.href = \"http://localhost:3000\";\n    window.sessionStorage.clear();\n    window.location.reload();\n  }\n\n  render() {\n    const { collapsed } = this.state;\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" defaultOpenKeys={['sub1']} defaultSelectedKeys={['5']} mode=\"inline\">\n            <Menu.Item key=\"1\" icon={<TeamOutlined />}>\n              <Link to=\"/main\">홈</Link>\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<PieChartOutlined />}>\n              <Link to=\"/card\">카드 관리</Link>\n            </Menu.Item>\n            <Menu.Item key=\"3\" icon={<DesktopOutlined />}>\n              <Link to=\"/payment\">결제 내역</Link>\n            </Menu.Item>\n            <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"회원 정보\">\n              <Menu.Item key=\"4\"><Link to=\"/userinfo/pw\">비밀번호 변경</Link></Menu.Item>\n              {/* <Menu.Item key=\"5\"><Link to=\"/userinfo/change\">회원정보 수정</Link></Menu.Item> */}\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n            <Button onClick={this.handleClick} style={{ float: 'right', margin: 15}}>\n              Logout\n            </Button>\n          </Header>\n          <Content style={{ margin: '150px' }}>\n              <RegistrationForm />\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nfunction UserInfoChange() {\n  return (\n    <SiderDemo />\n  );\n}\n\nexport default UserInfoChange;\n\n","/home/moss/OJT/src/Pages/Deny.js",[],"/home/moss/OJT/src/Pages/UserInfoPw.js",["80","81","82"],"import React, { useState } from 'react';\nimport crypto from 'crypto';\n\nimport { Link } from 'react-router-dom';\nimport '../App.css';\nimport 'antd/dist/antd.css';\nimport { Layout, Menu, Form, Input, Button, message } from 'antd';\nimport {\n  DesktopOutlined,\n  PieChartOutlined,\n  FileOutlined,\n  TeamOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport axios from 'axios';\n\nconst { Header, Content, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nconst FormLayoutDemo = () => {\n  const [form] = Form.useForm();\n  const [formLayout, setFormLayout] = useState('horizontal');\n  const [reqInProgress, setReqInProgress] = useState(false);\n\n  const onFormLayoutChange = ({ layout }) => {\n    setFormLayout(layout);\n  };\n\n  const formItemLayout =\n    formLayout === 'horizontal'\n      ? {\n          labelCol: {\n            span: 4,\n          },\n          wrapperCol: {\n            span: 14,\n          },\n        }\n      : null;\n  const buttonItemLayout =\n    formLayout === 'horizontal'\n      ? {\n          wrapperCol: {\n            span: 14,\n            offset: 4,\n          },\n        }\n      : null;\n\n\n  const updatePw = (values) => {\n    setReqInProgress(true);\n    const id = window.sessionStorage.getItem('id');\n    const oldpw = crypto.createHash('sha512').update(values.oldpw).digest('base64');\n    const newpw = crypto.createHash('sha512').update(values.newpw).digest('base64');\n    let p;\n    let auth = false;\n    const old_data = {\n      \"header\": {\n          \"DATA_TYPE\": \"3\"\n      },\n      \"dto\": {\n          \"USER_ID\": id\n      }\n    }\n\n    axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/ReadUserAccount?action=SO', old_data).then(response => {\n      // console.log('old post data: '+JSON.stringify(old_data))\n      // console.log(response)\n      p = response.data.dto.USER_PW;\n      if (oldpw != p){\n        message.error('잘못된 비밀번호입니다.')\n        setReqInProgress(false)\n      } else {\n        const new_data = {\n          \"header\": {\n              \"DATA_TYPE\": \"3\"\n          },\n          \"dto\": {\n              \"USER_ID\": id,\n              \"USER_PW\": newpw,\n          }\n        }\n          // console.log('auth true!')\n        axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/UpdatePWUserAccount?action=SO', new_data).then(response => {\n          // console.log('new post data: '+JSON.stringify(new_data))\n          // console.log('update')\n          setTimeout(() => {\n            message.success('비밀번호가 변경되었습니다.')\n            setReqInProgress(false)\n          }, 1000);\n        }).catch(error => {\n          message.error('비밀번호 변경에 실패하였습니다.')\n          setReqInProgress(false)\n        });\n      }\n      // alert('비밀번호를 변경하였습니다.')\n    }).catch(error => {\n      message.error('서버와의 통신에 실패하였습니다.')\n      setReqInProgress(false)\n    });\n  }\n\n  return (\n    <>\n      <Form style = {{margin: 'auto', maxWidth: '40vw', paddingRight: '30px'}}\n        {...formItemLayout}\n        layout={formLayout}\n        form={form}\n        initialValues={{\n          layout: formLayout,\n        }}\n        onValuesChange={onFormLayoutChange}\n        onFinish={updatePw}\n      >\n        <Form.Item name=\"oldpw\" label=\"현재 비밀번호\"\n          rules={[\n            {\n              required: true,\n              message: '현재 비밀번호를 입력해주세요.',\n            },\n          ]}\n          >\n          <Input.Password disabled={reqInProgress}/>\n        </Form.Item>\n        <Form.Item name=\"newpw\" label=\"새로운 비밀번호\"\n            rules={[\n              {\n                required: true,\n                message: '변경할 비밀번호를 입력해주세요.',\n              },\n            ]}\n            >\n          <Input.Password disabled={reqInProgress}/>\n        </Form.Item>\n\n        <Form.Item {...buttonItemLayout}>\n          <Button type=\"primary\" htmlType=\"submit\" loading={reqInProgress}>변경</Button>\n        </Form.Item>\n\n      </Form>\n    </>\n  );\n};\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n  };\n\n  onCollapse = collapsed => {\n    console.log(collapsed);\n    this.setState({ collapsed });\n  };\n\n  handleClick(){\n    window.location.href = \"http://aria.sparcs.org:32785\";\n    window.sessionStorage.clear();\n    window.location.reload();\n  }\n\n  render() {\n    const { collapsed } = this.state;\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" defaultOpenKeys={['sub1']} defaultSelectedKeys={['4']} mode=\"inline\">\n            <Menu.Item key=\"1\" icon={<TeamOutlined />}>\n              <Link to=\"/main\">홈</Link>\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<PieChartOutlined />}>\n              <Link to=\"/card\">카드 관리</Link>\n            </Menu.Item>\n            <Menu.Item key=\"3\" icon={<DesktopOutlined />}>\n              <Link to=\"/payment\">결제 내역</Link>\n            </Menu.Item>\n            <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"회원 정보\">\n              <Menu.Item key=\"4\"><Link to=\"/userinfo/pw\">비밀번호 변경</Link></Menu.Item>\n              {/* <Menu.Item key=\"5\"><Link to=\"/userinfo/change\">회원정보 수정</Link></Menu.Item> */}\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n            <Button onClick={this.handleClick} style={{ float: 'right', margin: 15}}>\n              Logout\n            </Button>\n          </Header>\n          <Content style={{ paddingTop: '10vw', paddingLeft: '5vw' }}>\n            <FormLayoutDemo />\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nfunction UserInfoPw() {\n  return (\n    <SiderDemo />\n  );\n}\n\nexport default UserInfoPw;\n","/home/moss/OJT/src/Pages/Payment.js",["83","84","85","86","87","88"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport '../App.css';\nimport 'antd/dist/antd.css';\nimport moment from 'moment';\n\nimport { Layout, Menu, Table, Button, Input, Pagination, Modal, DatePicker, Form, Radio, message, Select } from 'antd';\nimport {\n  DesktopOutlined,\n  PieChartOutlined,\n  FileOutlined,\n  TeamOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\n\nconst { Header, Content, Sider } = Layout;\nconst { SubMenu } = Menu;\nconst { Search } = Input;\nconst { RangePicker } = DatePicker;\nconst { Option } = Select;\n\nconst modanFormLayout = {\n  labelCol: {\n    span: 6,\n  },\n};\nconst dateFormat = 'YYYY/MM/DD';\n\nconst columns = [\n  {\n    title: '승인번호',\n    dataIndex: 'pay_id',\n    width: '20%'\n  },\n  {\n    title: '카드번호',\n    dataIndex: 'card_num',\n    width: '26%'\n  },\n  {\n    title: '국내외결제구분',\n    dataIndex: 'abroad',\n    width: '10%'\n  },\n  // {\n  //   title: '승인여부',\n  //   dataIndex: 'status',\n  //   width: '10%'\n  // },\n  {\n    title: '결제금액',\n    dataIndex: 'amount',\n    width: '12%'\n  },\n  {\n    title: '거래일자',\n    dataIndex: 'date',\n    width: '17%'\n  },\n  {\n    title: '비고',\n    dataIndex: 'memo',\n    width: '15%'\n  },  \n];\n\nclass PaymentTable extends React.Component {\n  state = {\n    selectedRowKeys: [], // Check here to configure the default column\n    payment_data: [],\n    selectedPayID: [],\n    cardList: [],\n    loading: true,\n    isAddPayDiagVisible: false,\n    isDelPayDiagVisible: false,\n    requestInProgress: false,\n    card_num: \"\",\n    formInputPayAmount: \"\",\n    range: [moment().clone().startOf('year'),\n            moment().clone().endOf('year')]\n  };\n\n  numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  showAddPayDiag = () => {\n    this.setState({ isAddPayDiagVisible: true, isDelCardDiagVisible: false });\n  };\n  \n  hideAddPayDiag = () => {\n    this.setState({ isAddPayDiagVisible: false });\n  };\n\n  showDelPayDiag = () => {\n    // set card data to process on del modal\n    this.setState({\n      isAddPayDiagVisible: false,\n      isDelPayDiagVisible: true,\n    });\n  };\n\n    \n\n  // forceFormInputInPattern: if new value of a form does not match the pattern\n  //                          of the given field_info_regex, then it cancels the change\n  //\n  //                          - Prerequisites: - states for each input, refs for each form\n  //                                           - no need to set values of input as state\n  //\n  //                          * formRef: a reference which is created by React.createRef(),\n  //                                     and assigned by <Form ... ref={this.createdRef} ...>\n  //                          * fieldInfoMap: { formItemName1: [ stateName1, regExp1, stringProcFunc1 ]\n  //                                            formItemName2: [ stateName2, regExp2, stringProcFunc2 ],\n  //                                            ... }\n  //\n  //                      Ex) <Form onValuesChange={(changedValues) => {\n  //                              this.forceFormInputInPattern(formRef, changedValues, fieldInfoMap);\n  //                            }}\n  //                            ref={formRef} ...>\n  //\n  forceFormInputInPattern = (formRef, changedValues, fieldInfoMap) => {\n    \n    Object.keys(changedValues).forEach((k) => {\n      \n      if (fieldInfoMap[k] != null) {\n        let newValue = changedValues[k];\n        const stateName = fieldInfoMap[k][0];\n        const regExp = fieldInfoMap[k][1];\n        const stringProcFunc = fieldInfoMap[k][2];\n          \n        // if string process function exists, execute\n        if (stringProcFunc != null) {\n          newValue = stringProcFunc(newValue);\n        }\n        \n        let fieldValue = {};\n        if (newValue.match(regExp)) {\n          fieldValue[k] = newValue;\n          this.state[stateName] = newValue;\n        } else {\n          fieldValue[k] = this.state[stateName];\n        }\n      \n        formRef.current.setFieldsValue(fieldValue);\n      }\n    });\n\n  }\n    \n  // forceInputInPattern: if new value does not match pattern in input,\n  //                      then it cancels the change\n  //\n  //                      - Prerequisites: need to set values of input as state\n  //\n  //                      Ex) <Input onInput={(e) => this.forceInputInPattern(e, 'stateName')}\n  //                            value={stateName} ... />\n  //\n  forceInputInPattern = (e, inputValueStateName, pattern) => {\n    //console.log('forceInputInPattern', e, inputValueStateName);\n    let resultObj = {};\n    resultObj[inputValueStateName] =\n      e.target.value.match(pattern)\n      ? e.target.value\n      : this.state[inputValueStateName];\n    \n    this.setState(resultObj);\n  }\n  \n\n  // hideDelCardDiag: hide del modal\n  hideDelPayDiag = () => {\n    this.setState({ isDelPayDiagVisible: false });\n  };\n\n  loadData = (id) => {\n    this.setState({loading: true});\n    const data = {\n      \"header\": {\n          \"DATA_TYPE\": \"3\"\n      },\n      \"dto\": {\n          \"USER_ID\": id // TODO:: Need to change from props\n      }\n    }\n    axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/ReadPaymentTransactionAll?action=SO', data).then(response => {\n      const temp  = response.data.dto.PaymentTransactionList;\n      const data_source = [];\n      if (temp != null) {\n        for (let i = 0; i < temp.length; i++) {\n          data_source.push({\n            key: i,\n            pay_id: temp[i].PAY_ID,\n            date: temp[i].PAY_TIME.slice(0,10),\n            card_num: temp[i].CARD_NUM.slice(0,4)+'-'+temp[i].CARD_NUM.slice(4,8)+'-'+temp[i].CARD_NUM.slice(8,12)+'-'+temp[i].CARD_NUM.slice(12,16),\n            amount: this.numberWithCommas(temp[i].PAY_AMOUNT)+'원',\n            // status: temp[i].PAY_STATUS === \"E001\" ? `승인` : `거절`,\n            abroad: temp[i].PAY_ABROAD === `C001` ? `국내` : `해외`,\n            memo: temp[i].PAY_MEMO\n          });\n        }\n      } else {\n        message.error('결제 내역이 존재하지 않습니다.');\n      }\n      //console.log(data_source)\n      this.setState({ payment_data: data_source, loading: false });\n    }).catch(error => {\n      this.setState({ payment_data: [], loading: false });\n      message.error('결제 내역을 불러오는 도중 오류가 발생하였습니다.');\n    });\n  }\n\n  onSearch = () => {\n    this.setState({ loading: true })\n    const date_start = this.state.range == null ? \"1900/01/01\" : this.state.range[0].format(dateFormat);\n    const date_end = this.state.range == null ? \"9999/12/31\" : this.state.range[1].format(dateFormat);\n    const card_num = this.state.card_num;\n    const id = window.sessionStorage.getItem('id');\n    if((date_start == null) || (date_end == null)){\n      message.error(\"날짜를 입력해주세요.\");\n    }else{\n      const data = {\n        \"header\": {\n            \"DATA_TYPE\": \"3\"\n        },\n        \"dto\": {\n            \"USER_ID\": id, // TODO:: Need to change from props\n            \"CARD_NUM\": card_num,\n            \"PAY_TIME_START\": date_start,   // NOT NULL\n            \"PAY_TIME_END\": date_end      // NOT NULL\n        }\n      }\n      axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/ReadPaymentTransactionFromDate?action=SO', data).then(response => {\n        //console.log(\"post data: \"+JSON.stringify(data));\n        const temp  = response.data.dto.PaymentTransactionList;\n        const data_source = [];\n        if (temp != null) {\n          for (let i = 0; i < temp.length; i++) {\n            data_source.push({\n              key: i,\n              pay_id: temp[i].PAY_ID,\n              date: temp[i].PAY_TIME.slice(0,10),\n              card_num: temp[i].CARD_NUM.slice(0,4)+'-'+temp[i].CARD_NUM.slice(4,8)+'-'+temp[i].CARD_NUM.slice(8,12)+'-'+temp[i].CARD_NUM.slice(12,16),\n              amount: this.numberWithCommas(temp[i].PAY_AMOUNT)+'원',\n              // status: temp[i].PAY_STATUS === \"E001\" ? `승인` : `거절`,\n              abroad: temp[i].PAY_ABROAD === `C001` ? `국내` : `해외`,\n              memo: temp[i].PAY_MEMO\n            });\n          }\n        } else {\n          message.error('결제 내역이 존재하지 않습니다.');\n        }\n        this.setState({ payment_data: data_source, loading: false, selectedRowKeys: [] });\n        //console.log('search data source:'+JSON.stringify(data_source));\n      }).catch(error => {\n        this.setState({ payment_data: [], loading: false, selectedRowKeys: [] });\n        console.log(error);\n        message.error('결제 내역을 불러오는 도중 오류가 발생하였습니다.');\n      });\n    }\n\n  };\n\n  loadCardList = (id) => {\n    // const id = window.sessionStorage.getItem('id');\n    const data = {\n      \"header\": {\n          \"DATA_TYPE\": \"3\"\n      },\n      \"dto\": {\n          \"USER_ID\": id\n      }\n    }\n    axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/ReadPaymentCardList?action=SO', data).then(response => {\n      const temp  = response.data.dto.paymentCardList;\n      const card_data = [];\n      for (let i = 0; i < temp.length; i++) {\n        card_data.push({\n          key: temp[i].CARD_NUM,\n          name: temp[i].CARD_NM+'('+temp[i].CARD_NUM.slice(-4,)+')'\n        })\n      }\n      // console.log(card_data)\n      this.setState({ cardList: card_data})\n    }).catch(error => {\n      this.setState({ cardList: []});\n    });\n  }\n\n  onCardChange = (value) => {\n    console.log(value)\n  }\n\n  onCardSearch = (val) => {\n    console.log(val)\n  }\n\n  addPayInfo = (payinfo) => {\n    // var payDate = new Date(payinfo.payDate);\n    this.setState({requestInProgress: true});\n    const id = window.sessionStorage.getItem('id');\n    \n    const date = payinfo.payDate.format(dateFormat);\n    const data = {\n      \"header\": {\n          \"DATA_TYPE\": \"3\"\n      },\n      \"dto\": {\n        \"PAY_ID\": Math.floor(Math.random()*10000000),\n        \"CARD_NUM\": payinfo.cardNum,\n        \"PAY_TIME\": date,\n        \"PAY_AMOUNT\": payinfo.payAmount,\n        \"PAY_ABROAD\": payinfo.payAbroad,\n        \"PAY_STATUS\": \"E001\",\n        \"PAY_MEMO\": payinfo.payMemo\n      }\n    }\n    axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/InsertPaymentTransaction?action=SO', data).then(response => {\n      console.log(\"post insert data: \"+JSON.stringify(data));\n      if (!('exception' in response)) {\n        message.success('결제 내역이 추가되었습니다.');\n        setTimeout(() => {\n          this.setState({isAddPayDiagVisible: false, requestInProgress: false});\n          this.loadData(id);\n        }, 1000);\n      } else {\n        message.error('결제 내역을 추가하는 도중 오류가 발생하였습니다.');\n        this.setState({ loading: false, selectedRowKeys: [], requestInProgress: false})\n      }\n    }).catch(error => {\n      console.log(error);\n      message.error('결제 내역을 추가하는 도중 오류가 발생하였습니다.');\n      this.setState({ loading: false, selectedRowKeys: [], requestInProgress: false})\n    });\n  }\n\n  delPayInfo = () => {\n    this.setState({requestInProgress: true});\n\n    const payIDList = this.state.selectedPayID;\n    const id = window.sessionStorage.getItem('id');\n    console.log('삭제할 payID: '+JSON.stringify(payIDList))\n    const totalCount = payIDList.length;\n    let finishedCount = 0;\n    let succeededCount = 0;\n\n    payIDList.forEach((pay_id) => {\n      \n      const reqOpt = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          header: {\n            DATA_TYPE: '3'\n          },\n          dto: {\n            PAY_ID: pay_id\n          }\n        })\n      };\n      console.log(reqOpt);\n      let response = fetch('http://192.1.4.246:14000/AB3-5/OJTWEB/DeletePaymentTransaction?action=SO', reqOpt)\n          .then(res => res.json());\n\n      response.then(\n        (responseJson) => {\n          \n          if (!('exception' in responseJson)) {\n            succeededCount++;\n            finishedCount++;\n          } else {\n            finishedCount++;\n            console.log(responseJson);\n          }\n\n          if (finishedCount == totalCount) {\n            if (succeededCount == totalCount) {\n              message.success('카드가 삭제되었습니다.');\n              this.loadData(id)\n              \n            } else {\n              message.error('카드를 삭제하는 도중 오류가 발생하였습니다.');\n            }\n            this.setState({ isDelPayDiagVisible: false, requestInProgress: false, selectedRowKeys: []})\n          }\n        },\n        () => {\n          \n          finishedCount++;\n          \n          if (finishedCount == totalCount) {\n            message.error('카드를 삭제하는 도중 오류가 발생하였습니다.');\n            this.setState({ isDelPayDiagVisible: false, requestInProgress: false});\n          }\n        }\n      );\n      \n    });\n    // for (let i = 0; i < payIdList.length; i++) {\n    //   const data = {\n    //     \"header\": {\n    //         \"DATA_TYPE\": \"3\"\n    //     },\n    //     \"dto\": {\n    //       \"PAY_ID\": payIdList[i]\n    //     }\n    //   }\n    //   // console.log(data);\n    //   reqList.push(axios.post('http://192.1.4.246:14000/AB3-5/OJTWEB/DeletePaymentTransaction?action=SO', data));\n    // }\n    // axios.all(reqList).then(\n    //   axios.spread(function (results) {\n    //     // console.log(results)\n    //     let temp = results.map(r => r.data.dto);\n    //     // console.log(temp)\n    //     if (!('exception' in results)) {\n    //       alert('결제 내역이 삭제되었습니다.');\n    //     }\n    //   })\n    // ).catch((e) => console.log(e));\n\n  }\n\n  createConfirmModalForm = (formId, titleText, confirmText, visibleState, hideFunc, submitFunc) => {\n\n    const { requestInProgress } = this.state;\n\n    return (\n        <Modal title={titleText} visible={visibleState}\n      onCancel={hideFunc}\n      destroyOnClose={true}\n      footer={[\n          <Button type=\"default\" onClick={hideFunc}>\n          취소\n        </Button>,\n          <Button form={formId} type=\"primary\"\n        key=\"submit\" htmlType=\"submit\" loading={requestInProgress}>\n          확인\n        </Button>\n        ]}\n        >\n        <Form id={formId} onFinish={submitFunc}>\n        \n      {confirmText}\n        \n        </Form>\n        </Modal>\n    );\n  }\n\n  onSelectChange = selectedRowKeys => {\n    // console.log('selectedRowKeys changed: ', selectedRowKeys);\n    const data = this.state.payment_data;\n    this.setState({ selectedRowKeys });\n    var payIdList = [];\n    for (let i = 0; i < selectedRowKeys.length; i++) {\n      payIdList.push(data[selectedRowKeys[i]].pay_id)\n    }\n    // console.log('payIdList: '+JSON.stringify(payIdList));\n    this.setState({ selectedPayID: payIdList});\n  };\n\n  onChange = (e) => {\n    this.setState({\n      card_num: e.target.value\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.addForm = React.createRef();\n  }\n  \n  componentDidMount = () => {\n    const id = window.sessionStorage.getItem('id');\n    this.loadData(id);\n    this.loadCardList(id);\n  }\n\n  render() {\n    const { loading, isDelPayDiagVisible, cardList, selectedRowKeys, card_num, isAddPayDiagVisible, requestInProgress } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n    };\n    const hasSelected = selectedRowKeys.length > 0;\n    const data = this.state.payment_data;\n    // console.log(cardList);\n    var options = cardList.map(({key, name}) =><Option key={key} value={key}>{name}</Option>);\n    //console.log(options)\n    // console.log(data);\n    // console.log('render data source: '+JSON.stringify(data));\n\n    const fieldInfoMap = { payAmount: ['formInputPayAmount', /^(-)?\\d*$/] };\n\n  //                      Ex) <Form onValuesChange={(changedValues) => {\n  //                              this.forceFormInputInPattern(formRef, changedValues, fieldInfoMap);\n  //                            }}\n  //                            ref={formRef} ...>\n\n\n\n      \n    return (\n      <div>\n        <div style={{ marginTop: 10, marginBottom: 10, display: 'flex'}}>\n        <RangePicker\n          defaultValue={this.state.range}\n          format={dateFormat}\n          onChange={(value, dateString) => this.setState({ range: value })}\n          style={{ marginRight: '2px' }}\n        />\n        <Search value={card_num} placeholder=\"카드번호\" onSearch={this.onSearch}\n          onInput={(e) => this.forceInputInPattern(e, 'card_num', /^\\d{0,16}$/)} style={{ width: 200 }} />\n        <Button style={{ marginLeft: 'auto'  }} onClick={this.showAddPayDiag} >\n          추가\n        </Button>\n        <Modal title=\"결제\" visible={isAddPayDiagVisible}\n          onCancel={this.hideAddPayDiag}\n          okText='추가' cancelText='취소'\n          destroyOnClose={true}\n          footer={[\n            <Button form=\"addPayForm\" type=\"secondary\"\n              onClick={this.hideAddPayDiag}>\n              취소\n            </Button>,\n            <Button form=\"addPayForm\" type=\"primary\"\n              key=\"submit\" htmlType=\"submit\" loading={requestInProgress}>\n              추가\n            </Button>\n          ]}\n        >\n        <Form id=\"addPayForm\" onFinish={this.addPayInfo}\n        initialValues={{payAbroad: 'C001', payApprov: 'E001'}}\n        onValuesChange={(changedValues) => {\n          this.forceFormInputInPattern(this.addForm, changedValues, fieldInfoMap);\n        }}\n        ref={this.addForm}\n        {...modanFormLayout}>\n\n          <Form.Item name='cardNum' label='카드번호'\n            rules={[\n              {\n                required: true,\n                message: '필수 입력 항목입니다.',\n              },\n            ]}>\n            <Select\n              showSearch\n              style={{ width: 200 }}\n              placeholder=\"카드목록\"\n              onChange={this.onCardChange}\n              onSearch={this.onCardSearch}>\n            {options}\n            </Select>\n\n          </Form.Item>\n        \n          <Form.Item name='payAmount' label='결제금액'\n            rules={[\n              {\n                required: true,\n                message: '필수 선택 항목입니다.',\n              },\n            ]}>\n            <Input />\n          </Form.Item>\n\n          <Form.Item name='payDate' label='거래일자'\n            rules={[\n              {\n                required: true,\n                message: '필수 선택 항목입니다.',\n              },\n            ]}>\n            <DatePicker picker='date' placeholder='YYYY-MM-DD' \n              style={{ width: 200 }}/>\n          </Form.Item>\n\n          <Form.Item name='payAbroad' label='국내외결제구분'\n            rules={[\n              {\n                required: true,\n                message: '필수 선택 항목입니다.',\n              },\n            ]}>\n            <Radio.Group value='payAbroad'>\n            <Radio.Button value='C001'>국내</Radio.Button>\n            <Radio.Button value='C002'>해외</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n\n          {/* <Form.Item name='payApprov' label='승인여부'\n            rules={[\n              {\n                required: true,\n                message: '필수 선택 항목입니다.',\n              },\n            ]}>\n            <Radio.Group value='payApprov'>\n            <Radio.Button value='E001'>승인</Radio.Button>\n            <Radio.Button value='E002'>거절</Radio.Button>\n            </Radio.Group>\n          </Form.Item> */}\n\n          <Form.Item name='payMemo' label='비고'>\n            <Input />\n          </Form.Item>\n\n        </Form>\n        </Modal>\n        <Button danger style={{ float: 'right', margin: '0 2px'  }} onClick={this.showDelPayDiag} disabled={!hasSelected}>\n        삭제\n        </Button>\n          {this.createConfirmModalForm(\"delForm\", \"결제내역 삭제\",\n                                   \"선택된 결제 내역을 모두 삭제하시겠습니까?\",\n                                   isDelPayDiagVisible,\n                                   this.hideDelPayDiag,\n                                   this.delPayInfo)}\n        </div>\n        <Table rowSelection={rowSelection} columns={columns} dataSource={data} loading={loading} />\n      </div>\n    );\n  }\n}\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n  };\n\n  onCollapse = collapsed => {\n    //console.log(collapsed);\n    this.setState({ collapsed });\n  };\n\n  handleClick(){\n    window.location.href = \"http://aria.sparcs.org:32785\";\n    window.sessionStorage.clear();\n    window.location.reload();\n  }\n  \n  render() {\n    const { collapsed } = this.state;\n    const userid = this.props.userid;\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" defaultSelectedKeys={['3']} mode=\"inline\">\n            <Menu.Item key=\"1\" icon={<TeamOutlined />}>\n              <Link to=\"/main\">홈</Link>\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<PieChartOutlined />}>\n              <Link to=\"/card\">카드 관리</Link>\n            </Menu.Item>\n            <Menu.Item key=\"3\" icon={<DesktopOutlined />}>\n              <Link to=\"/payment\">결제 내역</Link>\n            </Menu.Item>\n            <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"회원 정보\">\n              <Menu.Item key=\"4\"><Link to=\"/userinfo/pw\">비밀번호 변경</Link></Menu.Item>\n              {/* <Menu.Item key=\"5\"><Link to=\"/userinfo/change\">회원정보 수정</Link></Menu.Item> */}\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n            <Button onClick={this.handleClick} style={{ float: 'right', margin: 15}}>\n              Logout\n            </Button>\n          </Header>\n          <Content style={{ margin: '0 16px' }}>\n            <PaymentTable userid={userid}/>\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nfunction Payment({ userid }) {\n  const userID = userid;\n  return (\n    <SiderDemo userid={userID}/>\n  );\n}\n\nexport default Payment;\n\n","/home/moss/OJT/src/Pages/Card.js",["89","90","91","92","93","94","95","96","97","98","99","100"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\nimport 'antd/dist/antd.css';\nimport {\n  Layout, Menu, Table, Button, Input,\n  Pagination, Modal, Form, Radio, DatePicker,\n  Select, message, Space } from 'antd';\nimport {\n  DesktopOutlined,\n  PieChartOutlined,\n  FileOutlined,\n  TeamOutlined,\n  UserOutlined,\n  DownOutlined,\n} from '@ant-design/icons';\nimport moment from 'moment';\n\nconst { Header, Content, Sider } = Layout;\nconst { SubMenu } = Menu;\nconst { Search } = Input;\nconst { Option } = Select;\n\n// config\nconst reqBaseUrl = 'http://192.1.4.246:14000/AB3-5/OJT/';\nconst pageSizeDefault = 10;\nconst modanFormLayout = {\n  labelCol: {\n    span: 6,\n  },\n};\n\n// table columns\nconst columns = [\n  {\n    title: '카드명',\n    dataIndex: 'cardName',\n    width: '13%',\n  },\n  {\n    title: '카드사',\n    dataIndex: 'cardCompany',\n    width: '13%',\n  },\n  {\n    title: '카드번호',\n    dataIndex: 'cardNum',\n    width: '20%',\n  },\n  {\n    title: '결제계좌은행',\n    dataIndex: 'bank',\n    width: '13%',\n  },\n  {\n    title: '결제계좌번호',\n    dataIndex: 'bankAccount',\n    width: '20%',\n  },\n  {\n    title: '유효기간',\n    dataIndex: 'cardExpirationDate',\n    width: '13%',\n  },\n  {\n    title: '상태',\n    dataIndex: 'cardStatus',\n    width: '8%',\n  },\n];\n\n\n\n\nclass CardTable extends React.Component {\n\n  state = {\n    username: window.sessionStorage.getItem(\"id\"),\n    selectedRowKeys: [], // Check here to configure the default column\n    loading: true,\n    requestInProgress: false,\n    \n    cardcoList: [],\n    bankList: [],\n    cardData: [],\n    selectedCardData: [],\n    maxDataCount: -1,\n    pageSize: pageSizeDefault,\n    pageIdx: 1,\n    searchString: null,\n    \n    isAddCardDiagVisible: false,\n    isModCardDiagVisible: false,\n    isDelCardDiagVisible: false,\n    \n    formInputCardNum: \"\",\n    formInputBankAcc: \"\",\n  };\n\n  onSelectChange = selectedRowKeys => {\n    this.setState({ selectedRowKeys });\n    //console.log(selectedRowKeys);\n  };\n\n  setPageStates = (page, pageSize) => {\n    this.setState({ pageSize: pageSize, pageIdx: page });\n  }\n    \n\n\n  //////////////////// force input ////////////////////\n\n  // initializeInputValues: initialize all states in arg list to empty string\n  initializeInputValues = (inputValueStateNameList) => {\n    let resultObj = {};\n    if (inputValueStateNameList != null\n      && Array.isArray(inputValueStateNameList)) {\n      inputValueStateNameList.forEach(name => resultObj[name] = \"\");\n    }\n    this.setState(resultObj);\n  }\n\n\n  // forceInputInPattern: if new value does not match pattern in input,\n  //                      then it cancels the change\n  //\n  //                      - Prerequisites: need to set values of input as state\n  //\n  //                      Ex) <Input onInput={(e) => this.forceInputInPattern(e, 'stateName')}\n  //                            value={stateName} ... />\n  //\n  forceInputInPattern = (e, inputValueStateName) => {\n    console.log('forceInputInPattern', e, inputValueStateName);\n    let resultObj = {};\n    resultObj[inputValueStateName] =\n      (e.target.validity.valid)\n      ? e.target.value\n      : this.state[inputValueStateName];\n    \n    this.setState(resultObj);\n  }\n\n  // forceFormInputInPattern: if new value of a form does not match the pattern\n  //                          of the given field_info_regex, then it cancels the change\n  //\n  //                          - Prerequisites: - states for each input, refs for each form\n  //                                           - no need to set values of input as state\n  //\n  //                          * formRef: a reference which is created by React.createRef(),\n  //                                     and assigned by <Form ... ref={this.createdRef} ...>\n  //                          * fieldInfoMap: { formItemName1: [ stateName1, regExp1, stringProcFunc1 ]\n  //                                            formItemName2: [ stateName2, regExp2, stringProcFunc2 ],\n  //                                            ... }\n  //\n  //                      Ex) <Form onValuesChange={(changedValues) => {\n  //                              this.forceFormInputInPattern(formRef, changedValues, fieldInfoMap);\n  //                            }}\n  //                            ref={formRef} ...>\n  //\n  forceFormInputInPattern = (formRef, changedValues, fieldInfoMap) => {\n    \n    Object.keys(changedValues).forEach((k) => {\n      \n      if (fieldInfoMap[k] != null) {\n        let newValue = changedValues[k];\n        const stateName = fieldInfoMap[k][0];\n        const regExp = fieldInfoMap[k][1];\n        const stringProcFunc = fieldInfoMap[k][2];\n          \n        // if string process function exists, execute\n        if (stringProcFunc != null) {\n          newValue = stringProcFunc(newValue);\n        }\n        \n        let fieldValue = {};\n        if (newValue.match(regExp)) {\n          fieldValue[k] = newValue;\n          this.state[stateName] = newValue;\n        } else {\n          fieldValue[k] = this.state[stateName];\n        }\n      \n        formRef.current.setFieldsValue(fieldValue);\n      }\n    });\n\n  }\n\n\n  cardNumSetDash = (input) => {\n    return (input.slice(0,4) + '-' + input.slice(4,8)\n            + '-' + input.slice(8,12) + '-' + input.slice(12,16)).replace(/-+$/, '');\n  }\n  \n  cardNumAppendDash = (input) => {\n    let returnVal = input;\n    if (input.match(/^\\d+$/)) {\n      returnVal = this.cardNumSetDash(input);\n    }\n    if (returnVal.length <= 19 && returnVal.match(/\\d{5}$/)) {\n      const valLen = returnVal.length;\n      returnVal = input.slice(0, valLen - 1) + '-' + input.substr(valLen - 1);\n    }\n    return returnVal;\n  }\n\n  cardNumRemoveDash = (input) => {\n    return input.replace(/-/g, '');\n  }\n\n    \n  fieldInfoMap = {\n    cardNum: ['formInputCardNum',\n              /^(\\d(\\d(\\d(\\d(-(\\d(\\d(\\d(\\d(-(\\d(\\d(\\d(\\d(-(\\d(\\d(\\d(\\d)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?$/,\n              this.cardNumAppendDash],\n    bankAccount: ['formInputBankAcc', /^\\d*$/],\n  }\n\n\n\n  \n  //////////////////// data fetch ////////////////////\n\n  // getCodeList: get available codename list\n  getCodeList = () => {\n    \n    // POST request\n    const reqOpt = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        header: {\n          DATA_TYPE: 'J'\n        }\n      })\n    };\n\n    // send request & get response (card company list)\n    let response = fetch(reqBaseUrl + 'GetCardcoList?action=SO', reqOpt)\n        .then(res => res.json());\n    \n    // response handling\n    response.then(\n      (responseJson) => {\n        let newState = {cardcoList: null};\n        \n        // received data successfully\n        if ('dto' in responseJson && 'STR_VAL' in responseJson.dto) {\n          \n          // map data from json & compose dropdown menu\n          newState.cardcoList = responseJson.dto.STR_VAL.map(\n            (obj, idx) =>\n              <Option key={idx} value={obj.STR_VAL}>\n              {obj.STR_VAL}\n            </Option>\n          );\n        }\n\n        // no data received\n        else {\n          if ('exception' in responseJson) { \n            message.error('카드사 목록 요청이 실패하였습니다.');\n          } else {\n            message.error('카드사 목록이 존재하지 않습니다.');\n          }\n        }\n        \n        this.setState(newState);\n      },\n      \n      // connection fail\n      () => {\n        //message.error('서버와 연결할 수 없습니다.');\n        this.setState({cardcoList: null});\n      }\n    );\n\n    // send request & get response (bank list)\n    response = fetch(reqBaseUrl + 'GetBankList?action=SO', reqOpt)\n      .then(res => res.json());\n    \n    // response handling\n    response.then(\n      (responseJson) => {\n        let newState = {bankList: null};\n        \n        // received data successfully\n        if ('dto' in responseJson && 'STR_VAL' in responseJson.dto) {\n\n          // map data from json & compose dropdown menu\n          newState.bankList = responseJson.dto.STR_VAL.map(\n            (obj, idx) =>\n              <Option key={idx} value={obj.STR_VAL}>\n              {obj.STR_VAL}\n            </Option>\n          );\n        }\n        \n        // no data received\n        else {\n          if ('exception' in responseJson) { \n            message.error('은행 목록 요청이 실패하였습니다.');\n          } else {\n            message.error('은행 목록이 존재하지 않습니다.');\n          }\n        }\n        this.setState(newState);\n      },\n      \n      // connection fail\n      () => {\n        //message.error('서버와 연결할 수 없습니다.');\n        this.setState({bankList: null});\n      }\n    );\n  }\n\n\n\n  \n  // fetchCardData: get cardinfo data\n  fetchCardData = (pagination, filters, sorter) => {\n    this.setState({loading: true});\n\n    // set searchString\n    const {\n      searchString,\n      username\n    } = this.state;\n    let searchCardName = searchString;\n    let searchCardNum = searchString;\n\n    // if filters has input, then use searchString from filter\n    // as searchString from state is not updated yet\n    if (filters != null) {\n      if (filters.cardName != null) {\n        searchCardName = filters.cardName[0];\n      }\n      if (filters.cardNum != null) {\n        searchCardNum = filters.cardNum[0];\n      }\n    }\n\n    let errStrPrefix;\n    if (searchCardName == null) {\n      errStrPrefix = '회원 \\'' + username + '\\' 의 ';\n    } else {\n      errStrPrefix = '검색어 \\'' + searchCardName + '\\' 에 해당하는 '\n    }\n    \n    // POST request\n    const reqOpt = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        header: {\n          DATA_TYPE: 'J'\n        },\n        dto: {\n          USER_ID: username,\n          CARD_NM: searchCardName,\n          CARD_NUM: searchCardNum,\n          REQ_PAGESIZE: pagination.pageSize,\n          REQ_PAGEIDX: pagination.current\n        }\n      })\n    };\n    \n    // send request & get response\n    let response = fetch(reqBaseUrl + 'ReadCardInfo?action=SO', reqOpt)\n        .then(res => res.json());\n\n    // response handling\n    response.then(\n      (responseJson) => {\n        let newState = {loading: false};\n\n        // received data successfully\n        if ('dto' in responseJson && 'CardInfo' in responseJson.dto\n            && responseJson.dto.CardInfo.length > 0) {\n\n          newState.selectedRowKeys = [];\n          \n          let mappedCardData = responseJson.dto.CardInfo.map((cardinfo, idx) => ({\n            key: idx,\n            cardName: cardinfo.CARD_NM,\n            cardCompany: cardinfo.CARDCO_NM,\n            cardNum: this.cardNumSetDash(cardinfo.CARD_NUM),\n            bankAccount: cardinfo.BANK_ACC,\n            bank: cardinfo.BANK_NM,\n            cardExpirationDate: moment(new Date(cardinfo.CARD_EXPIRED)).format('MM/YY'),\n            cardStatus: cardinfo.CARD_STATUS\n          }));\n          newState.cardData = mappedCardData;\n          newState.pageIdx = pagination.current;\n\n          if (!(pagination.current > 0)) {\n            newState.maxDataCount = responseJson.dto.CardInfo[0].REQ_PAGEIDX;\n            newState.pageIdx = 1;\n          }\n        }\n        \n        // no data received\n        else {\n          if ('exception' in responseJson) { \n            message.error('서버와 연결할 수 없습니다.');\n          } else {\n            message.error(errStrPrefix + '카드가 존재하지 않습니다.');\n          }\n          newState.cardData = [];\n        }\n        this.setState(newState);\n      },\n      \n      // connection fail\n      () => {\n        message.error('서버와 연결할 수 없습니다.');\n        this.setState({cardData: null, loading: false});\n      }\n    );\n  }\n\n\n\n  \n  //////////////////// modal ////////////////////\n\n  \n  // showAddCardDiag: show add modal\n  showAddCardDiag = () => {\n    this.setState({\n      isModCardDiagVisible: false,\n      isDelCardDiagVisible: false,\n      isAddCardDiagVisible: true\n    });\n  };\n\n  \n  // hideAddCardDiag: hide add modal\n  hideAddCardDiag = () => {\n    this.setState({ isAddCardDiagVisible: false });\n  };\n  \n\n  // showModCardDiag: show mod modal\n  showModCardDiag = () => {\n\n    // set card data to show on mod modal\n    const {\n      selectedRowKeys,\n      cardData,\n      selectedCardData\n    } = this.state;\n\n    let targetData = cardData[selectedRowKeys[0]];\n    \n    this.setState({\n      isAddCardDiagVisible: false,\n      isDelCardDiagVisible: false,\n      isModCardDiagVisible: true,\n      selectedCardData: {\n        cardNum: targetData.cardNum,\n        cardName: targetData.cardName,\n        cardCompany: targetData.cardCompany,\n        bank: targetData.bank,\n        bankAccount: targetData.bankAccount,\n        cardExpirationDate: moment(targetData.cardExpirationDate, 'MM/YY'),\n        cardStatus: targetData.cardStatus\n      }\n    });\n  };\n\n  \n  // hideModCardDiag: hide mod modal\n  hideModCardDiag = () => {\n    this.setState({ isModCardDiagVisible: false });\n  };\n\n\n  // showDelCardDiag: show del modal\n  showDelCardDiag = () => {\n\n    // set card data to process on del modal\n    const {\n      selectedRowKeys,\n      cardData\n    } = this.state;\n\n    \n    let targetData = selectedRowKeys.map(selectedIdx => cardData[selectedIdx].cardNum);\n;\n    \n    this.setState({\n      isAddCardDiagVisible: false,\n      isModCardDiagVisible: false,\n      isDelCardDiagVisible: true,\n      selectedCardData: targetData\n    });\n  };\n\n  \n  // hideDelCardDiag: hide del modal\n  hideDelCardDiag = () => {\n    this.setState({ isDelCardDiagVisible: false });\n  };\n\n\n\n    \n  // createCardinfoModalForm: returns add/mod cardinfo modal form, which can be inserted in render()\n  createCardinfoModalForm = (formId, titleText, submitText, cancelText, visibleState, hideFunc, submitFunc, initValues, itemDisabledStates) => {\n    \n    const {\n      requestInProgress,\n      cardcoList, bankList\n    } = this.state;\n    \n    if (initValues == null) {\n      initValues = {cardStatus: '사용'};\n    }\n\n    // reset forced inputs when hide modal\n    const hideFuncInitValues = (e) => {\n      // list of value states to initialize when closed\n      this.initializeInputValues(\n        [\n          'formInputCardNum',\n          'formInputBankAcc',\n        ]\n      );\n      // execute hideFunc\n      hideFunc(e);\n    }\n\n\n    //const forceInputInPattern = (e, inputValueStateName) => {\n    //  (this.forceInputValidity.bind(this))(e, inputValueStateName);\n    //}\n  \n    return (\n        <Modal title={titleText} visible={visibleState}\n        onCancel={hideFuncInitValues}\n      destroyOnClose={true}\n      footer={[\n          <Button type=\"default\" disabled={requestInProgress} onClick={hideFuncInitValues}>\n          {cancelText}\n        </Button>,\n          <Button form={formId} type=\"primary\"\n        key=\"submit\" htmlType=\"submit\" loading={requestInProgress}>\n          {submitText}\n        </Button>\n      ]}\n        >\n        <Form id={formId} onFinish={submitFunc}\n        onValuesChange={(changedValues) => {\n            this.forceFormInputInPattern(this[formId], changedValues, this.fieldInfoMap);\n        }}\n        ref={this[formId]}\n      initialValues={initValues}\n      {...modanFormLayout} >\n        \n        \n        <Form.Item name='cardName' label='카드명'\n        rules={[\n          {\n            required: true,\n            message: '필수 입력 항목입니다.',\n          },\n        ]}>\n        <Input\n        disabled={itemDisabledStates ? itemDisabledStates.cardName : null} />\n        </Form.Item>\n        \n        <Form.Item name='cardCompany' label='카드사'\n        rules={[\n          {\n            required: true,\n            message: '필수 선택 항목입니다.',\n          },\n        ]}>\n        <Select placeholder='카드사 선택' onChange={this.onCardcoSelectClick}\n        disabled={itemDisabledStates ? itemDisabledStates.cardCompany : null} \n        style={{ width: 200 }} >\n        {cardcoList}\n        </Select>\n        </Form.Item>\n        \n        <Form.Item name='cardNum' label='카드번호'\n        rules={[\n          {\n            required: true,\n            message: '필수 입력 항목입니다.',\n          },\n          {\n            len: 19,\n            message: '유효한 카드번호가 아닙니다.',\n          }\n        ]}>\n        <Input placeholder=\"####-####-####-####\"\n        disabled={itemDisabledStates ? itemDisabledStates.cardNum : null} \n        style={{ width: 200 }}/>\n        </Form.Item>\n        \n        <Form.Item name='bank' label='결제계좌은행'\n        rules={[\n          {\n            required: true,\n            message: '필수 선택 항목입니다.',\n          },\n        ]}>\n        <Select placeholder='은행 선택' onChange={this.onBankSelectClick}\n      disabled={itemDisabledStates ? itemDisabledStates.bank : null} \n        style={{ width: 200 }}>\n        {bankList}\n        </Select>\n        </Form.Item>\n            \n        <Form.Item name='bankAccount' label='결제계좌번호'\n        rules={[\n          {\n            required: true,\n            message: '필수 입력 항목입니다.',\n          }\n        ]}\n        >\n        <Input type=\"text\" placeholder=\"'-' 없이 숫자만 입력\"\n        disabled={itemDisabledStates ? itemDisabledStates.bankAccount : null} \n        style={{ width: 200 }} />\n        </Form.Item>\n\n        \n        <Form.Item name='cardExpirationDate' label='유효기간'\n        rules={[\n          {\n            required: true,\n            message: '필수 선택 항목입니다.',\n          },\n        ]}>\n        <DatePicker placeholder='MM/YY' picker='month' format='MM/YY'\n        disabled={itemDisabledStates ? itemDisabledStates.cardExpirationDate : null}\n        style={{ width: 145 }} />\n        </Form.Item>\n        \n        <Form.Item name='cardStatus' label='상태'\n        rules={[\n          {\n            required: true,\n            message: '필수 선택 항목입니다.',\n          },\n        ]}>\n        <Radio.Group value='cardStatus'\n      disabled={itemDisabledStates ? itemDisabledStates.cardStatus : null}>\n        <Radio.Button value='사용'>사용</Radio.Button>\n        <Radio.Button value='사용중지'>사용중지</Radio.Button>\n        </Radio.Group>\n        </Form.Item>\n            \n        </Form>\n        </Modal>\n    );\n  };\n\n\n\n\n  // createConfirmModalForm: create modal for confirm\n  createConfirmModalForm = (formId, titleText, confirmText, visibleState, hideFunc, submitFunc) => {\n\n    const { requestInProgress } = this.state;\n\n    return (\n        <Modal title={titleText} visible={visibleState}\n      onCancel={hideFunc}\n      destroyOnClose={true}\n      footer={[\n          <Button type=\"default\" onClick={hideFunc}>\n          취소\n        </Button>,\n          <Button form={formId} type=\"primary\"\n        key=\"submit\" htmlType=\"submit\" loading={requestInProgress}>\n          확인\n        </Button>\n        ]}\n        >\n        <Form id={formId} onFinish={submitFunc}>\n        \n      {confirmText}\n        \n        </Form>\n        </Modal>\n    );\n  }\n  \n\n    \n  \n  //////////////////// add & mod & del card info ////////////////////\n  \n  // setCardInfo: send insert/update request\n  setCardInfo = (cardinfo) => {\n    \n    const {\n      pageSize,\n      isAddCardDiagVisible,\n      username\n    } = this.state;\n    \n    this.setState({requestInProgress: true});\n    \n    const workName = isAddCardDiagVisible ? '추가' : '수정';\n    \n    var expirationDate = new Date(cardinfo.cardExpirationDate);\n    // POST request\n    const reqOpt = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        header: {\n          DATA_TYPE: 'J'\n        },\n        dto: {\n          USER_ID: username,\n          CARD_NM: cardinfo.cardName,\n          CARDCO_NM: cardinfo.cardCompany,\n          CARD_NUM: this.cardNumRemoveDash(cardinfo.cardNum),\n          BANK_NM: cardinfo.bank,\n          BANK_ACC: cardinfo.bankAccount,\n          CARD_EXPIRED: [expirationDate.getFullYear(),\n                         expirationDate.getMonth() + 1].join('-'),\n          CARD_STATUS: cardinfo.cardStatus\n        }\n      })\n    };\n\n    // send request & set response data to state\n    let response = fetch(reqBaseUrl +\n                         (isAddCardDiagVisible ?\n                          'InsertCardInfo' : 'UpdateCardInfo') + '?action=SO',\n                         reqOpt)\n        .then(res => res.json());\n\n    // response handling\n    response.then(\n      (responseJson) => {\n        if (!('exception' in responseJson)) {\n          message.success('카드가 ' + workName + '되었습니다.');\n          setTimeout(() => {\n            this.setState({\n              isAddCardDiagVisible: false,\n              isModCardDiagVisible: false,\n              requestInProgress: false});\n            this.fetchCardData({pageSize: pageSize, current: -1});\n          }, 1000);\n        } else {\n          message.error('카드를 ' + workName + '하는 도중 오류가 발생하였습니다.');\n          this.setState({requestInProgress: false});\n          //console.log(responseJson);\n        }\n      },\n      () => {\n        message.error('서버와 연결할 수 없습니다.');\n        this.setState({requestInProgress: false});\n      }\n    );\n  }\n\n\n  // delCardInfo: send delete requests\n  delCardInfo = (cardinfo) => {\n    \n    const {\n      pageSize,\n      selectedCardData\n    } = this.state;\n    \n    this.setState({requestInProgress: true});\n\n    const totalCount = selectedCardData.length;\n    let finishedCount = 0;\n    let succeededCount = 0;\n\n    \n    selectedCardData.forEach((cardNum) => {\n      \n      const reqOpt = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          header: {\n            DATA_TYPE: 'J'\n          },\n          dto: {\n            CARD_NUM: this.cardNumRemoveDash(cardNum)\n          }\n        })\n      };\n      \n      let response = fetch(reqBaseUrl + 'DeleteCardInfo?action=SO', reqOpt)\n          .then(res => res.json());\n\n      response.then(\n        (responseJson) => {\n          \n          if (!('exception' in responseJson)) {\n            succeededCount++;\n            finishedCount++;\n          } else {\n            finishedCount++;\n            //console.log(responseJson);\n          }\n\n          if (finishedCount == totalCount) {\n            if (succeededCount == totalCount) {\n              message.success('카드가 삭제되었습니다.');\n              this.fetchCardData({pageSize: pageSize, current: -1});\n            } else {\n              message.error('카드를 삭제하는 도중 오류가 발생하였습니다.');\n            }\n            this.setState({requestInProgress: false, isDelCardDiagVisible: false});\n          }\n          \n        },\n        () => {\n          \n          finishedCount++;\n          \n          if (finishedCount == totalCount) {\n            message.error('카드를 삭제하는 도중 오류가 발생하였습니다.');\n            this.setState({requestInProgress: false, isDelCardDiagVisible: false});\n          }\n        }\n      );\n    });\n    \n  }\n\n  \n\n  //////////////////// search data ////////////////////\n\n  // onSearch: set search string before fetching data\n  onSearch = (searchStringInput) => {\n    const { pageSize } = this.state;\n\n    if (!searchStringInput) {\n      searchStringInput = null;\n    } \n\n    this.setState({ searchString: searchStringInput });\n    this.fetchCardData({pageSize: pageSize, current: -1},\n                       {cardName: [searchStringInput], cardNum: [searchStringInput]});\n  };\n  \n\n  \n  //////////////////// initial fetch ////////////////////\n\n\n  constructor(props) {\n    super(props);\n    this.addForm = React.createRef();\n    this.modForm = React.createRef();\n  }\n  \n  componentDidMount() {\n    this.fetchCardData({pageSize: pageSizeDefault, current: -1});\n    this.getCodeList();\n  }\n\n\n  //////////////////// render ////////////////////\n  \n  render() {\n    \n    const {\n      loading, selectedRowKeys, selectedCardData,\n      cardData, pageSize, pageIdx, maxDataCount,\n      isAddCardDiagVisible, isModCardDiagVisible, isDelCardDiagVisible,\n      requestInProgress,\n      cardcoList, bankList\n    } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n    };\n    const pagination = {\n      defaultPageSize: pageSize,\n      current: pageIdx,\n      total: maxDataCount,\n      onChange: this.setPageStates\n    }\n    const itemSelected = selectedRowKeys.length > 0;\n    const oneItemSelected = selectedRowKeys.length == 1;\n    \n    return (\n        <div>\n        <div style={{ marginTop: 10, marginBottom: 10, display: 'flex'}}>\n\n\n      \n        <Space align='start' style={{ float: 'left' }}>\n        <Search placeholder=\"카드명 또는 카드번호\" onSearch={this.onSearch} style={{ width: 200 }} />\n        </Space>\n\n\n      \n        <Button onClick={this.showAddCardDiag}\n        style={{ marginLeft: 'auto', marginRight: '2px' }} >\n        추가\n      </Button>\n        \n      {this.createCardinfoModalForm(\"addForm\", \"카드 추가\", \"추가\", \"취소\",\n                                    isAddCardDiagVisible,\n                                    this.hideAddCardDiag,\n                                    this.setCardInfo,\n                                    null)}\n      \n        <Button onClick={this.showModCardDiag} disabled={!oneItemSelected}\n        style={{ marginRight: '2px' }}>\n        수정\n      </Button>\n        \n      {this.createCardinfoModalForm(\"modForm\", \"카드 수정\", \"수정\", \"취소\",\n                                    isModCardDiagVisible,\n                                    this.hideModCardDiag,\n                                    this.setCardInfo,\n                                    selectedCardData,\n                                    {\n                                      cardNum: true,\n                                      cardCompany: true,\n                                      cardExpirationDate: true\n                                    })}\n      \n        <Button danger onClick={this.showDelCardDiag} disabled={!itemSelected}\n        style={{ marginRight: '2px' }}>\n        삭제\n      </Button>\n\n\n      {this.createConfirmModalForm(\"delForm\", \"카드 삭제\",\n                                   \"선택된 카드를 모두 삭제하시겠습니까?\",\n                                   isDelCardDiagVisible,\n                                   this.hideDelCardDiag,\n                                   this.delCardInfo)}\n\n      \n\n      \n      </div>\n        <Table rowSelection={rowSelection} columns={columns} dataSource={cardData} onChange={this.fetchCardData} pagination={pagination} loading={loading} />\n        </div>\n    );\n  }\n}\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n  };\n\n  onCollapse = collapsed => {\n    //console.log(collapsed);\n    this.setState({ collapsed });\n  };\n\n  handleClick(){\n    window.location.href = \"http://aria.sparcs.org:32785\";\n    window.sessionStorage.clear();\n    window.location.reload();\n  }\n\n  render() {\n    const { collapsed } = this.state;\n    return (\n        <Layout style={{ minHeight: '100vh' }}>\n        <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" defaultSelectedKeys={['2']} mode=\"inline\">\n        <Menu.Item key=\"1\" icon={<TeamOutlined />}>\n        <Link to=\"/main\">홈</Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\" icon={<PieChartOutlined />}>\n        <Link to=\"/card\">카드 관리</Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\" icon={<DesktopOutlined />}>\n        <Link to=\"/payment\">결제 내역</Link>\n        </Menu.Item>\n        <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"회원 정보\">\n        <Menu.Item key=\"4\"><Link to=\"/userinfo/pw\">비밀번호 변경</Link></Menu.Item>\n        {/* <Menu.Item key=\"5\"><Link to=\"/userinfo/change\">회원정보 수정</Link></Menu.Item> */}\n        </SubMenu>\n        </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n            <Button onClick={this.handleClick} style={{ float: 'right', margin: 15}}>\n              Logout\n            </Button>\n          </Header>\n        <Content style={{ margin: '0 16px' }}>\n        <CardTable/>\n        </Content>\n        </Layout>\n        </Layout>\n    );\n  }\n}\n\nfunction Card() {\n  return (\n      <SiderDemo />\n  );\n}\n\nexport default Card;\n\n",{"ruleId":"101","severity":1,"message":"102","line":2,"column":27,"nodeType":"103","messageId":"104","endLine":2,"endColumn":36},{"ruleId":"101","severity":1,"message":"105","line":4,"column":10,"nodeType":"103","messageId":"104","endLine":4,"endColumn":16},{"ruleId":"101","severity":1,"message":"106","line":15,"column":8,"nodeType":"103","messageId":"104","endLine":15,"endColumn":22},{"ruleId":"101","severity":1,"message":"107","line":50,"column":10,"nodeType":"103","messageId":"104","endLine":50,"endColumn":14},{"ruleId":"108","severity":1,"message":"109","line":131,"column":1,"nodeType":"110","messageId":"111","endLine":160,"endColumn":9},{"ruleId":"101","severity":1,"message":"112","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":25},{"ruleId":"101","severity":1,"message":"113","line":6,"column":24,"nodeType":"103","messageId":"104","endLine":6,"endColumn":36},{"ruleId":"101","severity":1,"message":"114","line":9,"column":3,"nodeType":"103","messageId":"104","endLine":9,"endColumn":15},{"ruleId":"101","severity":1,"message":"112","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":25},{"ruleId":"101","severity":1,"message":"115","line":5,"column":16,"nodeType":"103","messageId":"104","endLine":5,"endColumn":21},{"ruleId":"101","severity":1,"message":"116","line":5,"column":31,"nodeType":"103","messageId":"104","endLine":5,"endColumn":39},{"ruleId":"101","severity":1,"message":"117","line":88,"column":10,"nodeType":"103","messageId":"104","endLine":88,"endColumn":23},{"ruleId":"101","severity":1,"message":"114","line":19,"column":3,"nodeType":"103","messageId":"104","endLine":19,"endColumn":15},{"ruleId":"101","severity":1,"message":"114","line":11,"column":3,"nodeType":"103","messageId":"104","endLine":11,"endColumn":15},{"ruleId":"101","severity":1,"message":"118","line":57,"column":9,"nodeType":"103","messageId":"104","endLine":57,"endColumn":13},{"ruleId":"119","severity":1,"message":"120","line":71,"column":17,"nodeType":"121","messageId":"122","endLine":71,"endColumn":19},{"ruleId":"101","severity":1,"message":"123","line":8,"column":46,"nodeType":"103","messageId":"104","endLine":8,"endColumn":56},{"ruleId":"101","severity":1,"message":"114","line":12,"column":3,"nodeType":"103","messageId":"104","endLine":12,"endColumn":15},{"ruleId":"124","severity":1,"message":"125","line":141,"column":11,"nodeType":"126","endLine":141,"endColumn":21},{"ruleId":"119","severity":1,"message":"127","line":377,"column":29,"nodeType":"121","messageId":"122","endLine":377,"endColumn":31},{"ruleId":"119","severity":1,"message":"127","line":378,"column":32,"nodeType":"121","messageId":"122","endLine":378,"endColumn":34},{"ruleId":"119","severity":1,"message":"127","line":392,"column":29,"nodeType":"121","messageId":"122","endLine":392,"endColumn":31},{"ruleId":"101","severity":1,"message":"123","line":7,"column":3,"nodeType":"103","messageId":"104","endLine":7,"endColumn":13},{"ruleId":"101","severity":1,"message":"114","line":12,"column":3,"nodeType":"103","messageId":"104","endLine":12,"endColumn":15},{"ruleId":"101","severity":1,"message":"128","line":15,"column":3,"nodeType":"103","messageId":"104","endLine":15,"endColumn":15},{"ruleId":"124","severity":1,"message":"125","line":178,"column":11,"nodeType":"126","endLine":178,"endColumn":21},{"ruleId":"101","severity":1,"message":"129","line":452,"column":7,"nodeType":"103","messageId":"104","endLine":452,"endColumn":23},{"ruleId":"119","severity":1,"message":"127","line":812,"column":29,"nodeType":"121","messageId":"122","endLine":812,"endColumn":31},{"ruleId":"119","severity":1,"message":"127","line":813,"column":32,"nodeType":"121","messageId":"122","endLine":813,"endColumn":34},{"ruleId":"119","severity":1,"message":"127","line":827,"column":29,"nodeType":"121","messageId":"122","endLine":827,"endColumn":31},{"ruleId":"101","severity":1,"message":"130","line":879,"column":7,"nodeType":"103","messageId":"104","endLine":879,"endColumn":24},{"ruleId":"101","severity":1,"message":"131","line":880,"column":7,"nodeType":"103","messageId":"104","endLine":880,"endColumn":17},{"ruleId":"101","severity":1,"message":"132","line":880,"column":19,"nodeType":"103","messageId":"104","endLine":880,"endColumn":27},{"ruleId":"119","severity":1,"message":"127","line":893,"column":52,"nodeType":"121","messageId":"122","endLine":893,"endColumn":54},"no-unused-vars","'createRef' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'UserInfoChange' is defined but never used.","'user' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'useState' is defined but never used.","'LockOutlined' is defined but never used.","'FileOutlined' is defined but never used.","'Input' is defined but never used.","'Checkbox' is defined but never used.","'reqInProgress' is assigned a value but never used.","'auth' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Pagination' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","Expected '===' and instead saw '=='.","'DownOutlined' is defined but never used.","'selectedCardData' is assigned a value but never used.","'requestInProgress' is assigned a value but never used.","'cardcoList' is assigned a value but never used.","'bankList' is assigned a value but never used."]